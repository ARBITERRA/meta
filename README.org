#+TITLE: Arbiterra Intro Document
#+SUBTITLE:  Quick reference card
#+AUTHOR: Arsen A. Gutsal
#+EMAIL: (concat "a.gutsal" at-sign "softsky.company")
#+DESCRIPTION: Org mode syntax example
#+KEYWORDS:  org-mode, syntax, quick reference, cheat sheet, recommended practices, latex, beamer, html
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:nil toc:2 p:t

#+HTML_LINK_HOME: http://www.google.com
#+HTML_LINK_UP: http://www.bing.com

#+SETUPFILE: ~/.dotfiles/org/theme-readtheorg.setup

#+PROPERTY:  header-args :eval yes :exports both :results replace
#+STARTUP: inlineimages

#+MACRO: longtext this is a very very long text to include

* ARBITERRA documentation
	[[git@github.com:ARBITERRA/meta.git][Arbiterra]] is designed for automatic arbitrage tradings among
multiple crypto-exchanges.

Emails: [[mailto:a.gutsal@softsky.company][Arsen A. Gutsal, ]][[mailto:Schildenfeld@icloud.com][Harald Schildenfeld]]

#+begin_src plantuml :file docs/resources/my-diagram.png :exports results
[Data Pump] -> (Exchanges): Pull
note right of (Exchanges): Until WebSockets realtime\npulling is implemented,\n we use Rate Limit pulling
[Data Pump] --> [AWS Kinesis Stream]: Send updates

[AWS Kinesis Stream] <-- [Brains]: Read from
[Brains] -> (Think): Thinking
note right of (Think): Performs optimal arbitrage\npaths lookup
(Think) ..> [Trading bot]: Generate events
note right of [Trading bot]: For every path found\ngenerate #{Trading Event}
#+end_src
#+RESULTS:
[[file:docs/resources/my-diagram.png]]

#+begin_src dot :file docs/resources/graph.png :exports results
digraph D {

 DataPump  -> {DataLoader, Brains, GPU} -> TradingBot

 DataPump   [label="Data Pump"                 ];
 DataLoader [label="Kinesis Data Loader"       ];
 TradingBot [label="Trading Bot"               ];

}
#+end_src

#+RESULTS:
[[file:docs/resources/graph.png]]

** Modules
1) Data input module
2) Decision making module
3) Trading bot module


